@use 'sass:math';

$scale-typography: 1.25 !default;

// $base-font-size
$font-size-base: 16px !default;
$font-size-medium: ceil(($font-size-base * $scale-typography)) !default;
$font-size-large: ceil(($font-size-base * $scale-typography * 1.5)) !default;
$font-size-small: ceil((math.div($font-size-base, $scale-typography))) !default;

// $line-height
$line-height-base: rem(26) !default;
$line-height-medium: 1.6 !default;
$line-height-large: 1.8 !default;
$line-height-small: 1.5 !default;

// Round a number down
$line-height-count: floor(($font-size-base * $line-height-base)) !default;

// font family
$font-family-fallback: 'Arial', sans-serif;
$font-family-manrope: 'Manrope', sans-serif;
$font-family-neutral-face: 'Neutral Face', sans-serif;
$font-family-base: $font-family-manrope;
$font-family-second: $font-family-neutral-face;

$font-family-monospace: 'Inconsolata', 'Menlo', 'Consolas', 'Bitstream Vera Sans Mono', 'Courier', monospace;

// Use $typefaces to render custom font using @font-face.
// $typefaces - {map}
// @family - {string}
// @weight - {integer} or {keyword} i.e. 800, bold
// @style - {keyword} i.e. normal, italic

 $typefaces: (
   'neutral-face/NeutralFace': (
    family: 'Neutral Face',
    weight: 400,
    style: normal,
   ),
   'neutral-face/NeutralFaceBold': (
     family: 'Neutral Face',
     weight: 700,
     style: normal,
   ),
 );

@if variable-exists(typefaces) {
  @each $file, $option in $typefaces {
    @font-face {
      font-family: map-get(map-get($typefaces, $file), family);
      font-style: map-get(map-get($typefaces, $file), style);
      font-weight: map-get(map-get($typefaces, $file), weight);
      src: url('../fonts/#{$file}.ttf') format('truetype'),
      url('../fonts/#{$file}.woff') format('woff'),
      url('../fonts/#{$file}.woff2') format('woff2');
    }
  }
}
